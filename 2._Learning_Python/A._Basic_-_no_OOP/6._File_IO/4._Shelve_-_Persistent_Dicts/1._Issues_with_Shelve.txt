Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2020-05-14T16:35:39+05:30

====== 1. Issues with Shelve ======
Created Thursday 14 May 2020

0. **Keys **- All keys must be strings. Values may be any python object.
1. **Typos**
* If we misspell a key run the program , then we correct the typo and run it. Our dict now has two keys, one is unintended. This is not good. This happens because shelve is read-write by default.
* We need to delete the misspelled entry, using remove().
* Use get() method here for access.
* Use a count to check if we the keys are all okay.

2. **Updating the values**
* If our value is a list, if we do shelf_file(key).append(newval). This **does** not update the list. This should update the list, apparently. But remember that we are in a hard-drive and not main memory, so doing this is disabled in Python 3, to keep read/write efforts to a minimum.
* To update, make a list in the program, update and then reassign the value.
* This is the **reason why we cannot print .values() directly. **The values are not taken into the main memory until explicitly made to do so.
* We can set the **writeback**(a default param) to True in shelve.open(), this will update the dict as if it were all in memory. 
* file.sync() clears the cache.
{{{code: lang="python3" linenumbers="True"
with shelve.open('recipies') as recipies:
	recipies['blt'].append('butter')	#does not update

with shelve.open('recipies') as recipies:
	temp_list = recipies['blt']
	temp_list.append('butter')	#updates the list
}}}

**Remember**: Only values are tangible(printable, processable), not metadata like keys(), values() etc. All values are **returned by** **value**. This is **practical** because a single entry can be worked upon rather than millions of data entries. **This is why append does not work.**
Approach: Only editing things **writeback=**True

3. **Shelve uses pickle**
* Pickling and unpickling may slow down the processing, if values are complicated.
* Pickle is not data agnostic, i.e it does **depend** on type of data.
* Shelve is not good due in a setting where **concurrent write** access can occur.
* Data from untrusted sources, can/may wreak havoc.
* All these issues decrease the ubiquity of shelve.

4. **Shelve **is just like dictionary, i.e it's order is unpredictable. Although some OS's force an alphabetical order(we'll assume this is false, for making our code portable).

5. **Shelve** returns **view objects** as much as possible, e.g file_name.values(), keys() and items() only return references, printing them directly does not print the lists. This is not the case, surprisingly, for **= **though.
