Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2021-01-15T15:12:06+05:30

====== 1. Order of params ======
Created Friday 15 January 2021

**Default vs non-default**
The sole purpose of using default params is that we can skip them in the function call. The order exists because if default params came:
	* Before or in between non-default - default args won't be skippable in function call(they'd have to be passed explicitly), thereby defeating their purpose.
{{{code: lang="python3" linenumbers="True"
def fun1(a="who are you", b="True", x, y):
	print (a,b,x,y)

f("a arg", "b arg", 1, 2) # what's the use of default args
}}}

	* Hypothetically, it can be argued that even if the interpreter //were// made to //skip //default params; 'a' and 'b' in this case, and if we allowed for mixing the params. It would be impossible judge whether the arguments were supposed to be for a default or a non-default argument. It is ambiguous. 
{{{code: lang="python3" linenumbers="True"
func1("ok a", "ok b", 1) # is "ok a" meant for 'a' or 'b'
}}}


**arg* after positional**
* This is pretty obvious - if arg* appeared before a positional argument, the positional argument would never be set, because arg would //eat// up all arguments.
* A program with **arg **in the incorrect place is not a syntax error, but is a runtime error(only if you call the function).

**kwarg** order**
* As Python allows to pass arguments in any order: on a condition that that we have to mention names for all params.
{{{code: lang="python3" linenumbers="True"
def f(a, b, c):
    print(a, b, c)

f(1, 2, 3) # normal function call

f(b=2, a=1, c=3) # allowed
f(b=2, 1, c=3) # error - specify all(order irrelevant) OR specify none(keep them in order)
}}}

