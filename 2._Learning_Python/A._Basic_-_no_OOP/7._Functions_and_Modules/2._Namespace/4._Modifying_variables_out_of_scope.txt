Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-05-21T17:07:54+05:30

====== 4. Modifying variables out of scope ======
Created Thursday 21 May 2020

Does python allow modifying variables that are currently not in scope? **Yes**!

Among the 4 namespaces, only local is meant to be changeable and builtins are immutable. So we only have two possibilities:
1. ''global'' - allows writing to global variables.
{{{code: lang="python3" linenumbers="True"
x = 21
def f():
	x = 3
	global x
	x = 22 	# global x set to 22
	
print(x) # 22

def g():
	global x
	x = 23	
}}}

2. ''nonlocal'' - syntax same as ''global''. Allows writing to the enclosing(outer) function.
	* Cannot be used in place of ''global''. Strictly used for nested entities.
	* This exists because Python enforces a good coding practice - avoiding global variables.
{{{code: lang="python3" linenumbers="True"
def f():
    x = 2
    def g():
    	x = 64 # f.x not changed
        nonlocal x
        x = 45
    g()
    print(x)
f() # 45
}}}


Note: 
* Reading global/nonlocal variables is always allowed. These keywords are only needed for writing to them.
* ''global'' is unique.
* ''nonlocal'' will find and enable write access for the variable, assuming it is there at some enclosing scope. In other words, only the nearest scope variable is written to. If the variable is absent, an error is shown See example below:
{{{code: lang="python3" linenumbers="True"
def f(): # x is here
	def g(): # no x here
		print(x)
		def h():
			nonlocal x # refers to f.x, not g.x because that doesn't exist
			x = 23
		h()
	g()
	print(x)
# output
1
23
}}}

