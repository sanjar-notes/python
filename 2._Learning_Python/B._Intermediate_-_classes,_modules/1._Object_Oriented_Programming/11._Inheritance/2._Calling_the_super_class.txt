Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-05-28T09:43:46+05:30

====== 2. Calling the super class ======
Created Thursday 28 May 2020

0. If we don't have a function in the childClass, then the function is available, likewise the constructor is called for the base class. [[../inheritance_code/enemy1.py|Empty Childclass]] 
1. When we made an init method for the troll class, the init method of the Enemy is no longer accessible, it is **shadowed**. This is very different from C++. [[../inheritance_code/enemy2.py|shadowing_demo]] We see that 'Enemy constructor is no longer accessed'. 
2. We can still access the super class methods by doing Enemy.() [[../inheritance_code/enemy3.py|superclass_methods .]] This also ensures that there's a single **self**.
3. In python3, we can access the super method using the **super()**. [[../inheritance_code/enemy_4_super.py|super() way of accessing base attributes]] 
{{{code: lang="python3" linenumbers="True"
super().base_method()	# use this
super(currentClass, self).base_method() # same as line 1
}}}

4. Creating a Vampire class

Example of how inheritance handles this: 
1. We don't need to keep track of each object, it is taken care of by the compiler.
2. Coding effort is reduced, it has become natural now.
